import io
import requests
import PyPDF2
import pandas as pd

# Combinação de todos os URLs de acordo com a formatação de data
def dataspossiveis(ano, mes, dia, base):
    saida = []
    for a in ano:
        for b in mes:
            for c in dia:
                for d in base:
                    data = str(d)+str(a)+str(b)+str(c)
                    saida.append(data)
    return saida

base = ['https://www.fenabrave.org.br/portal/files/']
dia = ['2.pdf', '3.pdf']  # Opções possíveis
mes = ['01_', '02_', '03_', '04_', '05_', '06_', '07_', '08_', '09_', '10_', '11_', '12_']
ano = ['2023_','2022_']
datacomp = dataspossiveis(ano, mes, dia, base)

df1 = pd.DataFrame(datacomp)
lista_url = df1.values.tolist()

# Lista para armazenar os DataFrames resultantes
dfs = []

# Loop das URLs geradas pelo step anterior
for url in lista_url:
    url_base = url[0]
    for dia_opcao in dia:
        try:
            # Tentando acessar a URL com a opção de dia atual
            url_com_dia = url_base.replace('2.pdf', dia_opcao)
            r = requests.get(url_com_dia)
            r.raise_for_status()  # Verifica se houve algum erro ao fazer a requisição
            f = io.BytesIO(r.content)

            reader = PyPDF2.PdfReader(f)
            contents = reader.pages[5].extract_text().split('\n')

            # Dividindo as linhas por espaço em branco e transformando em colunas
            df2 = pd.DataFrame(contents)
            df2 = df2[0].str.split(expand=True)
            
            # Repetindo o valor da linha 2 antes de todas as linhas
            valor_linha_2 = df2.iloc[7, 0]  # Valor da linha 2
            
            # Adicionando 'Mes/ano' como a primeira coluna do DataFrame
            df2.insert(0, 'Mes/ano', valor_linha_2)
            
            # Refinamento dos dados de cada coluna
            df2['Car_name'] = df2.apply(lambda row: row[1] + ' ' + row[2] + ' ' + row[3] + ' ' + row[4] if row[5] is not None else (row[1] + ' ' + row[2] + ' ' + row[3] if row[4] is not None else (row[1] + ' ' + row[2] if row[3] is not None else None)), axis=1)
            df2[1] = df2.apply(lambda row: row['Car_name'] if row[3] is not None else row[1], axis=1)
            df2[2] = df2.apply(lambda row: row[3] if row[3] is not None else row[2], axis=1)
            df2[2] = df2.apply(lambda row: row[4] if row[4] is not None else row[2], axis=1)
            df2[2] = df2.apply(lambda row: row[5] if row[5] is not None else row[2], axis=1)
            df2[3] = pd.to_numeric(df2[3], errors='coerce')
            df2.rename(columns={0: 'Ranking', 1: 'Modelo', 2: 'Vendas'}, inplace=True)
            
            # Removendo as linhas 0 a 8
            df2 = df2.iloc[8:].drop(index=[58, 59, 60, 111])
            
            # Separando por virgula
            #df2['Mes/ano,Ranking,Modelo,Vendas'] = df2.apply(lambda row: ','.join(row.dropna().tolist()), axis=1)
            
            # Descartando as outras colunas
            df2.drop(columns=[3, 4, 5, 'Car_name'], inplace=True)
            
            dfs.append(df2)
            print(df2)
            
            break  # Se tudo correr bem, sai do loop
        except Exception as e:

            continue
    else:

        continue

# Concatenando todos os DataFrames em um único DataFrame
df_final = pd.concat(dfs, ignore_index=True)

# Exportando o DataFrame para um arquivo Excel
df_final.to_excel('dados_fenabrave.xlsx', index=False)
